CBOP
C !ROUTINE: AUTODIFF_OPTIONS.h
C !INTERFACE:
C #include "AUTODIFF_OPTIONS.h"

C !DESCRIPTION:
C *==================================================================*
C | CPP options file for AutoDiff (autodiff) package:
C | Control which optional features to compile in this package code.
C *==================================================================*
CEOP

#ifndef AUTODIFF_OPTIONS_H
#define AUTODIFF_OPTIONS_H
#include "PACKAGES_CONFIG.h"
#include "CPP_OPTIONS.h"

#ifdef ALLOW_AUTODIFF
#ifdef ECCO_CPPOPTIONS_H

C-- When multi-package option-file ECCO_CPPOPTIONS.h is used (directly included
C    in CPP_OPTIONS.h), this option file is left empty since all options that
C   are specific to this package are assumed to be set in ECCO_CPPOPTIONS.h

#else /* ndef ECCO_CPPOPTIONS_H */
C   ==================================================================
C-- Package-specific Options & Macros go here

C o Include/exclude code in order to be able to automatically
C   differentiate the MITgcmUV by using the Tangent Linear and
C   Adjoint Model Compiler (TAMC).
#define ALLOW_AUTODIFF_TAMC

C       >>> Checkpointing as handled by TAMC
#define ALLOW_TAMC_CHECKPOINTING

C       >>> Extract adjoint state
#define ALLOW_AUTODIFF_MONITOR

C       >>> DO 2-level checkpointing instead of 3-level
#define AUTODIFF_2_LEVEL_CHECKPOINT

C extend to 4-level checkpointing
c#undef AUTODIFF_4_LEVEL_CHECKPOINT

C o use divided adjoint to split adjoint computations
#undef ALLOW_DIVIDED_ADJOINT

#undef ALLOW_PACKUNPACK_METHOD2
C o This flag is incredibly useful as it reduces the number of
C   tape-files on the disc. Maybe it should even be the default.
#undef ALLOW_AUTODIFF_WHTAPEIO
C o use MDSFINDUINTS instead of AUTODIFF_MDSFINDUNITS to find unique and
C   valid file units, only used when ALLOW_AUTODIFF_WHTAPEIO is defined
#define AUTODIFF_USE_MDSFINDUNITS
C o This is a set of flags that, if defined at the same time, will get
C   rid of the autodiff_store/restore scheme. That is why we define a
C   "macro" flag to set them all at the same time, but they can also be
C   defined individually. This cannot (and should not) be the default,
C   because in some verificaation experiment cases (OpenAd, obcs_ctrl)
C   defining these flags leads TAF to not generate some
C   adexch_xy_rs/adexch_uv_xy_rs routines that are needed in
C   addummy_in_stepping.F
#undef AUTODIFF_USE_OLDSTORE
#ifdef AUTODIFF_USE_OLDSTORE
# define AUTODIFF_USE_OLDSTORE_3D
# define AUTODIFF_USE_OLDSTORE_2D
# define AUTODIFF_USE_OLDSTORE_EXF
# define AUTODIFF_USE_OLDSTORE_SEAICE
# define AUTODIFF_USE_OLDSTORE_OBCS
#endif

C o write separate tape files for each ptracer
#define AUTODIFF_PTRACERS_SPLIT_FILES

C o allow using viscFacInAd to recompute viscosities in AD
#undef AUTODIFF_ALLOW_VISCFACADJ

C o There are rare cases when s/r adexch_uv_xy_rs and adexch_xy_rs are
C   needed in addummy_in_stepping.  There are rare cases when these
C   routines are not generated by TAF leading to an error in the link
C   step, for example, when there are no 2D forcing fields
C   controls. We should have a cpp flag for that that is automatically
C   defined if any 2D forcing controls are defined. As a hack we use
C   the following cpp-flag that needs to be defined if this problem
C   occurs.
#undef AUTODIFF_EXCLUDE_ADEXCH_RS

C   ==================================================================
#endif /* ndef ECCO_CPPOPTIONS_H */
#endif /* ALLOW_AUTODIFF */
#endif /* AUTODIFF_OPTIONS_H */
